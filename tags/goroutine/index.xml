<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>goroutine on 毛珑珑的博客</title><link>https://maolonglong.tech/tags/goroutine/</link><description>Recent content in goroutine on 毛珑珑的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 07 Jul 2021 17:15:08 +0800</lastBuildDate><atom:link href="https://maolonglong.tech/tags/goroutine/index.xml" rel="self" type="application/rss+xml"/><item><title>goroutine 生命周期的管理</title><link>https://maolonglong.tech/post/golang/goroutine-lifecycles/</link><pubDate>Wed, 07 Jul 2021 17:15:08 +0800</pubDate><guid>https://maolonglong.tech/post/golang/goroutine-lifecycles/</guid><description>标准库 context 包 标准库的 context 包中主要就是几种控制 goroutine 生命周期的方法： WithCancel: 手动控制结束 WithTimeout: 指定超时时间后结束 WithDeadline: 指定时间结束 下面的样例演示了生成特定随机数后手动结束 goroutine 的操作，它会随机打印几次 &amp;ldquo;running&amp;hellip;&amp;rdquo; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) func main()</description></item></channel></rss>