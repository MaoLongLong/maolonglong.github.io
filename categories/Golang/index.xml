<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on 毛珑珑的博客</title><link>https://maolonglong.tech/categories/Golang/</link><description>Recent content in Golang on 毛珑珑的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 07 Jul 2021 17:15:08 +0800</lastBuildDate><atom:link href="https://maolonglong.tech/categories/Golang/index.xml" rel="self" type="application/rss+xml"/><item><title>goroutine 生命周期的管理</title><link>https://maolonglong.tech/post/golang/goroutine-lifecycles/</link><pubDate>Wed, 07 Jul 2021 17:15:08 +0800</pubDate><guid>https://maolonglong.tech/post/golang/goroutine-lifecycles/</guid><description>标准库 context 包 标准库的 context 包中主要就是几种控制 goroutine 生命周期的方法： WithCancel: 手动控制结束 WithTimeout: 指定超时时间后结束 WithDeadline: 指定时间结束 下面的样例演示了生成特定随机数后手动结束 goroutine 的操作，它会随机打印几次 &amp;ldquo;running&amp;hellip;&amp;rdquo; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) func main()</description></item><item><title>Go 函数选项模式（Functional Options）</title><link>https://maolonglong.tech/post/golang/functional-options/</link><pubDate>Sat, 03 Jul 2021 14:45:56 +0800</pubDate><guid>https://maolonglong.tech/post/golang/functional-options/</guid><description>在 Python 中经常可以看到这样的代码： 1 2 3 4 5 6 7 def sub(x=3, y=1): return x - y print(sub(3, 1)) print(sub(y=1, x=3)) print(sub()) 函数可以设置参数默认值。并且调用时，能指定名称以自由调换参数位置。 go 中显然没有这样的语法糖，但是我们能通过函数选项模式实现类似的功能。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39</description></item><item><title>高性能字节池设计 | bytebufferpool 源码分析</title><link>https://maolonglong.tech/post/golang/bytebufferpool/</link><pubDate>Mon, 28 Jun 2021 19:42:29 +0800</pubDate><guid>https://maolonglong.tech/post/golang/bytebufferpool/</guid><description>简介 今天的主角是 bytebufferpool ，仓库的 README 文件是这么描述 bytebufferpool 的： Currently bytebufferpool is fastest and most effective buffer pool written in Go. bytebufferpool 基本上是目前 Go 实现的最快的字节池，在许多优秀项目中都有被使用（fasthttp, quicktemplate, gnet） 什么是字节池？在读取文件或者从 io.Reader 获取数据时，一般都需要创建一个字节切片 []byte 作为缓冲，如果对于这种方法有大量的调用，就</description></item><item><title>无锁队列的简单实现</title><link>https://maolonglong.tech/post/golang/queue/</link><pubDate>Fri, 25 Jun 2021 18:31:06 +0800</pubDate><guid>https://maolonglong.tech/post/golang/queue/</guid><description>谈到无锁队列，就不得不提 Michael 和 Scott 在 1996 年发表的论文 Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms，Java 中 ConcurrentLinkedQueue 也是基于该论文的算法实现。 伪代码 论文中 lock-free queue 算法的伪代码： 正如论文的题目描述的，它非常简单，代码量很少。主要思路就是使用 CAS 操作队列的头指针和尾指针，以实现线程安全。 structure pointer_t {ptr: pointer to node_t, count: unsigned integer} structure</description></item><item><title>Unsafe Go</title><link>https://maolonglong.tech/post/golang/unsafe/</link><pubDate>Tue, 15 Jun 2021 13:30:28 +0800</pubDate><guid>https://maolonglong.tech/post/golang/unsafe/</guid><description>Go 语言 unsafe 包的 API 非常简单，只有 Alignof, Offsetof, Sizeof 和 Pointer，却能写出一些性能强悍的代码（文章最后会介绍 Gin 框架中利用 unsafe.Pointer 实现 []byte 和 string 互相转换的例子） Sizeof 1 func Sizeof(v ArbitraryType) uintptr Sizeof 返回 v 所占用的字节大小。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ExampleSizeof() { var b byte var i16 int16 var i32 int32 var i64 int64 fmt.Println(unsafe.Sizeof(b)) fmt.Println(unsafe.Sizeof(i16)) fmt.Println(unsafe.Sizeof(i32)) fmt.Println(unsafe.Sizeof(i64)) fmt.Println(unsafe.Sizeof(struct { x int64 y int64 }{})) // Output: // 1</description></item></channel></rss>