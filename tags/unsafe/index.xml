<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unsafe on 毛珑珑的博客</title><link>https://maolonglong.github.io/tags/unsafe/</link><description>Recent content in unsafe on 毛珑珑的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 25 Jun 2021 18:31:06 +0800</lastBuildDate><atom:link href="https://maolonglong.github.io/tags/unsafe/index.xml" rel="self" type="application/rss+xml"/><item><title>无锁队列的简单实现</title><link>https://maolonglong.github.io/post/golang/queue/</link><pubDate>Fri, 25 Jun 2021 18:31:06 +0800</pubDate><guid>https://maolonglong.github.io/post/golang/queue/</guid><description>谈到无锁队列，就不得不提 Michael 和 Scott 在 1996 年发表的论文 Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms，Java 中 ConcurrentLinkedQueue 也是基于该论文的算法实现。 伪代码 论文中 lock-free queue 算法的伪代码： 正如论文的题目描述的，它非常简单，代码量很少。主要思路就是使用 CAS 操作队列的头指针和尾指针，以实现线程安全。 structure pointer_t {ptr: pointer to node_t, count: unsigned integer} structure</description></item><item><title>Unsafe Go</title><link>https://maolonglong.github.io/post/golang/unsafe/</link><pubDate>Tue, 15 Jun 2021 13:30:28 +0800</pubDate><guid>https://maolonglong.github.io/post/golang/unsafe/</guid><description>Go 语言 unsafe 包的 API 非常简单，只有 Alignof, Offsetof, Sizeof 和 Pointer，却能写出一些性能强悍的代码（文章最后会介绍 Gin 框架中利用 unsafe.Pointer 实现 []byte 和 string 互相转换的例子） Sizeof 1 func Sizeof(v ArbitraryType) uintptr Sizeof 返回 v 所占用的字节大小。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ExampleSizeof() { var b byte var i16 int16 var i32 int32 var i64 int64 fmt.Println(unsafe.Sizeof(b)) fmt.Println(unsafe.Sizeof(i16)) fmt.Println(unsafe.Sizeof(i32)) fmt.Println(unsafe.Sizeof(i64)) fmt.Println(unsafe.Sizeof(struct { x int64 y int64 }{})) // Output: // 1</description></item></channel></rss>